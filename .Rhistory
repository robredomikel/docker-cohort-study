"~MS projects", "log transformation")
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=30, ylim = c(0, max_y), freq=F)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=30, ylim = c(0, max_y), freq=F)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=30, ylim = c(0, max(density(group1)$y)), freq=F)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=30, ylim = c(0, max(density(group1)$y)), freq=F)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
group2[is.infinite(group2)] <- NA
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=20, ylim = c(0, max(density(group1)$y)), freq=F)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=20, ylim = c(0, max(density(group2)$y)), freq=F)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=15, cex.lab=12, cex.axis=12)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=15, cex.lab=12, cex.axis=12)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=15, cex.lab=12, cex.axis=12)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=15, cex.lab=12, cex.axis=12)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=2, cex.lab=2, cex.axis=2)
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=2, cex.lab=2, cex.axis=2)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=5, cex.lab=2, cex.axis=2)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=2, cex.lab=2, cex.axis=2)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=2, cex.lab=2, cex.axis=2)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=1, cex.lab=1, cex.axis=1)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=1, cex.lab=1, cex.axis=1)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=1, cex.lab=1, cex.axis=1)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=1, cex.lab=1, cex.axis=1)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=1.5, cex.lab=1, cex.axis=1)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=1, cex.lab=1, cex.axis=1)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=1, cex.lab=1, cex.axis=1)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=1, cex.lab=1, cex.axis=1)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=1.5, cex.lab=1.2, cex.axis=1.2, xlab="")
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=1.5, cex.lab=1.2, cex.axis=1.2, xlab="")
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
cases_endvelocity
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=1.5, cex.lab=1.2, cex.axis=1.2, xlab="End velocity mean")
lines(density(group1), col="blue")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=1.5, cex.lab=1.2, cex.axis=1.2, xlab="End velocity mean")
lines(density(group2), col="blue")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=1.5, cex.lab=1.2, cex.axis=1.2, xlab="End velocity mean")
lines(density(group1), col="red")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=1.5, cex.lab=1.2, cex.axis=1.2, xlab="End velocity mean")
lines(density(group2), col="red")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=1.5, cex.lab=1.2, cex.axis=1.2)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=1.7, cex.lab=1.5, cex.axis=1.5, xlab="End velocity mean")
lines(density(group1), col="red")
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=1.7, cex.lab=1.5, cex.axis=1.5, xlab="End velocity mean")
lines(density(group2), col="red")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=1.7, cex.lab=1.5, cex.axis=1.5, xlab="End velocity mean")
lines(density(group1), col="red", lwd=1.5)
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=1.7, cex.lab=1.5, cex.axis=1.5, xlab="End velocity mean")
lines(density(group2), col="red", lwd=1.5)
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
lines(density(group2), col="red", lwd=2)
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), breaks=40, ylim = c(0, max(density(group1)$y)), freq=F,
cex.main=1.7, cex.lab=1.5, cex.axis=1.5, xlab="End velocity mean")
lines(density(group1), col="red", lwd=2)
hist(group2, main=paste(name2), breaks=40, ylim = c(0, max(density(group2)$y)), freq=F,
cex.main=1.7, cex.lab=1.5, cex.axis=1.5, xlab="End velocity mean")
lines(density(group2), col="red", lwd=2)
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1, "QQ plot"), col='blue',
cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "QQ plot"), col='blue',
cex.main=1.7, cex.lab=1.5, cex.axis=1.5)
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, controls_endvelocity, "MS projects",
"~MS projects", "~MS projects")
# Through Shapiro-Wilk test: (Given our small sample sizes... it matches the case scenario)
shapiro.test(cases_endvelocity) # For cases
shapiro.test(controls_endvelocity) # For controls
help("shapiro.test")
help("ad.test")
??ad.test
# Anderson-darling (given that it doesn't require sample size)
ad.test(cases_endvelocity)
ad.test(controls_endvelocity)
library(nortest)
# Anderson-darling (given that it doesn't require sample size)
ad.test(cases_endvelocity)
ad.test(controls_endvelocity)
help("cohen.d")
power_analysis
help("wilcox.test")
# Assuming different variance (Welch's t-test)
t.test(cases_sample_cube, controls_sample_cube, var.equal = FALSE)
# Trying the left sided sample t-test
t.test(cases_sample_cube, controls_sample_cube, var.equal = FALSE, alternative = 'two.sided')
t.test(cases_sample_cube, controls_sample_cube, var.equal = FALSE, alternative = 'less')
hist(cases_sample_cube)
hist(controls_sample_cube)
# Assuming different variance (Welch's t-test)
t.test(cases_endvelocity_cube, controls_endvelocity_cube, var.equal = FALSE)
# Trying the left sided sample t-test
t.test(cases_endvelocity_cube, controls_endvelocity_cube, var.equal = FALSE, alternative = 'two.sided')
t.test(cases_endvelocity_cube, controls_endvelocity_cube, var.equal = FALSE, alternative = 'less')
normality_plot(cases_endvelocity, cases_endvelocity_cube, "Original cases",
"Root cube cases", "cube transformation")
normality_plot(controls_endvelocity, controls_endvelocity_cube, "Original controls",
"Root cube controls", "cube transformation")
help(levene_test)
# 1. Linearity assumption (Residuals vs Fitted values)
# The blue line should go approximately horizontal and next to 0. If there is
# Some pronounced pattern then means  there is no perfect linearity
autoplot(model)
model <- lm(velocity_mean_end ~  factor(MS.NonMS) + velocity_mean_start +
size + n_languages + factor(creation_year) + n_commits + n_issues +
n_contributors, data = data_m.exact_1)
# 1. Linearity assumption (Residuals vs Fitted values)
# The blue line should go approximately horizontal and next to 0. If there is
# Some pronounced pattern then means  there is no perfect linearity
autoplot(model)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(broom)
library(ggfortify)
library(ggplot2)
library(tidyr)  # For pivoting the data
library(gridExtra)
library(dplyr)
library(car)
library(rgl)
# 1. Linearity assumption (Residuals vs Fitted values)
# The blue line should go approximately horizontal and next to 0. If there is
# Some pronounced pattern then means  there is no perfect linearity
autoplot(model)
help("aov")
summary(df)
raw_df <- read.csv('/Users/mrobredo23/OULU/docker_cohort-24/data/final_data_file.csv')
View(raw_df)
raw_df <- subset(raw_df, select = -c(trimmed_languages))
raw_df$velocity_mean_end <- raw_df$velocity_mean_end + 0.01
df <- raw_df[c(2:ncol(raw_df))] # For the modelling purposes
df$main_language <- as.numeric(as.factor(df$main_language))
df$creation_year <- as.numeric(as.factor(df$creation_year))
summary(df)
final_formula
library(car)
help("gamma")
###########################################
# 1.1.1 GLM (Gamma)
gamma_model <- glm(formula = final_formula, data=df, family = Gamma(link = "identity"))
final_formula
df
df$MS.NonMS <- as.numeric(as.factor(df$MS.NonMS))
###########################################
# 1.1.1 GLM (Gamma)
gamma_model <- glm(formula = final_formula, data=df, family = Gamma(link = "identity"))
gamma_model
###########################################
# 1.1.1 GLM (Gamma)
gamma_model <- glm(formula = final_formula, data=df, family = Gamma(link = "log"))
gamma_model
summary(gamma_model)
gamma_model <- glm(formula = final_formula, data=df, family = Gamma(link = "inverse"))
vif_values <- vif(gamma_model)
vif_values
help("vif")
gamma_model$residuals
plot(gamma_model$fitted.values, gamma_model$residuals)
gamma_model$effects
gamma_model$weights
shapiro.test(gamma_model$residuals)
qqnorm(gamma_model$residuals)
header_names
final_formula
###########################################
# 1.1.1 GLM (Gamma)
gamma_model <- glm(formula = velocity_mean_end ~ MS.NonMS + velocity_mean_start + size + n_languages +
creation_year + n_commits + n_issues + n_contributors + main_language, data=df, family = Gamma(link = "log"))
vif_values <- vif(gamma_model)
vif_values # No multicollinearity so far. None of the values has a
###########################################
# 1.1.1 GLM (Gamma)
gamma_model <- glm(formula = velocity_mean_end ~ MS.NonMS + velocity_mean_start + size + n_languages +
creation_year + n_commits + n_issues + n_contributors + main_language, data=df, family = Gamma(link = "log"))
shapiro.test(gamma_model$residuals)
qqnorm(gamma_model$residuals)
header_names <- c("MS.NonMS", "velocity_mean_start", "size", "n_languages", "n_commits", "n_issues", "n_contributors", "main_language")
cor_matrix <- cor(df[header_names])
cor_matrix
image(cor_matrix, main = "Correlation Matrix")
corrplot(cor_matrix, type="upper", order="hclust",
col=brewer.pal(n=8, name="PuOr"))
library(corrplot)
corrplot(cor_matrix, type="upper", order="hclust",
col=brewer.pal(n=8, name="PuOr"))
library(RColorBrewer)
corrplot(cor_matrix, type="upper", order="hclust",
col=brewer.pal(n=8, name="PuOr"))
# Assessment of the model results
shapiro.test(gamma_model$residuals)
summary(gamma_model)
mean(gamma_model$residuals^2)
plot(gamma_model$fitted.values, gamma_model$residuals^2)
plot(gamma_model$fitted.values, gamma_model$residuals)
# Set to comparison the impact of independent variable.
gamma_model_h1 <- glm(formula = velocity_mean_end ~ velocity_mean_start + size + n_languages +
creation_year + n_commits + n_issues + n_contributors + main_language, data=df, family = Gamma(link = "log"))
anova(gamma_model, gamma_model_h1, test="F")
# Impact of the interaction
step(gamma_model)
# Impact of the interaction
summary(step(gamma_model))
# Impact of the interaction
gamma_model_intr <- glm(formula = velocity_mean_end ~ MS.NonMS + velocity_mean_start + size*n_contributors + n_languages +
creation_year + n_commits + n_issues + main_language, data=df, family = Gamma(link = "log"))
summary(gamma_model_intr)
# Impact of the interaction
gamma_model_intr <- glm(formula = velocity_mean_end ~ MS.NonMS*velocity_mean_start + size*n_contributors + n_languages +
creation_year + n_commits + n_issues + main_language, data=df, family = Gamma(link = "log"))
summary(gamma_model_intr)
library(leaps)
install.packages("leaps")
library(leaps)
# Best combination
leaps(gamma_model)
library(glmulti)
install.packages("glmulti")
library(glmulti)
install.packages("rJava")
library(glmulti)
install.packages("Java")
library(glmulti)
# Best combination
glmulti(gamma_model)
install.packages("glmulti")
library(glmulti)
install.packages("rJava")
install.packages("glmulti")
library(glmulti)
###########################################
# 1.1.2 GLM (Inverse Gaussian)
invgauss_model <- glm(formula = velocity_mean_end ~ MS.NonMS + velocity_mean_start + size + n_languages +
creation_year + n_commits + n_issues + n_contributors + main_language, data=df, family = inverse.gaussian(link = "identity"))
###########################################
# 1.1.2 GLM (Inverse Gaussian)
invgauss_model <- glm(formula = velocity_mean_end ~ MS.NonMS + velocity_mean_start + size + n_languages +
creation_year + n_commits + n_issues + n_contributors + main_language, data=df, family = inverse.gaussian(link = "log"))
###########################################
# 1.1.2 GLM (Inverse Gaussian)
invgauss_model <- glm(formula = velocity_mean_end ~ MS.NonMS + velocity_mean_start + size + n_languages +
creation_year + n_commits + n_issues + n_contributors + main_language, data=df, family = inverse.gaussian(link = "inverse"))
###########################################
# 1.1.2 GLM (Inverse Gaussian)
invgauss_model <- glm(formula = velocity_mean_end ~ MS.NonMS + velocity_mean_start + size + n_languages +
creation_year + n_commits + n_issues + n_contributors + main_language, data=df, family = inverse.gaussian(link = "canonical"))
###########################################
# 1.1.2 GLM (Inverse Gaussian)
invgauss_model <- glm(formula = velocity_mean_end ~ MS.NonMS + velocity_mean_start + size + n_languages +
creation_year + n_commits + n_issues + n_contributors + main_language, data=df, family = inverse.gaussian(link = "identity"))
summary(df)
###########################################
# 1.1.2 GLM (Inverse Gaussian)
invgauss_model <- glm(formula = velocity_mean_end ~ MS.NonMS + velocity_mean_start + size + n_languages +
creation_year + n_commits + n_issues + n_contributors + main_language, data=df, family = inverse.gaussian(link = "identity"))
library(glmulti)
