cases_sample_cube <- sample(cases_endvelocity_cube, size = 30)
controls_sample_cube <- sample(controls_endvelocity_cube, size = 30)
normality_plot(cases_endvelocity_cube, cases_sample_cube, "cube pop cases",
"cube sample cases", "cube transformation")
normality_plot(controls_endvelocity_cube, controls_sample_cube, "Log pop controls",
"cube sample controls", "cube transformation")
# Normality test
shapiro.test(cases_sample_cube)
shapiro.test(controls_sample_cube)
controls_sample_cube <- sample(controls_endvelocity_cube, size = 30)
normality_plot(controls_endvelocity_cube, controls_sample_cube, "Log pop controls",
"cube sample controls", "cube transformation")
shapiro.test(controls_sample_cube)
cases_endvelocity
library(ggplot2)
df <- raw_df[c(2:ncol(raw_df))] # For the modelling purposes
# means and std of the samples:
cases_endvelocity_log_mean <- mean(cases_endvelocity_log)
cases_endvelocity_log_std <- sd(cases_endvelocity_log)
controls_endvelocity_log_mean <- mean(controls_endvelocity_log)
controls_endvelocity_log_std <- sd(controls_endvelocity_log)
ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE)
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE)
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE) + stat_summary(fun.y=mean, geom="point", shape=23, size=2) +
geom_jitter(shape=16, position=position_jitter(0.2))
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE) + stat_summary(fun=mean, geom="point", shape=23, size=2) +
geom_jitter(shape=16, position=position_jitter(0.2))
vplot
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE) + stat_summary(fun=mean, geom="point", shape=23, size=2, color="red") +
geom_jitter(shape=16, position=position_jitter(0.2))
vplot
library(lsr)
library(lsr)
# Distance effect by Cohen's D statistic
cohensD(sqmeans, nonsqmeans)
# Distance effect by Cohen's D statistic
cohensD(cases_endvelocity_log_mean, controls_endvelocity_log_mean)
# Distance effect by Cohen's D statistic
cohensD(cases_endvelocity_log, controls_endvelocity_log)
# Power-test
pwr.t2n.test(n1=58, n2=207, d= 0.07120195, sig.level = 0.1, alternative = 'two.sided')
library(pwr)
help(power.t2n.test)
??(power.t2n.test)
??("power.t2n.test")
install.packages("pwr")
library(pwr)
# Power-test
pwr.t2n.test(n1=58, n2=207, d= 0.07120195, sig.level = 0.1, alternative = 'two.sided')
t.test(x = cases_endvelocity_log, y = controls_endvelocity_log, alternative = 'two.sided')
raw_df <- read.csv('/Users/mrobredo23/OULU/docker_cohort-24/data/final_data_file.csv')
raw_df <- subset(raw_df, select = -c(trimmed_languages))
df <- raw_df[c(2:ncol(raw_df))] # For the modelling purposes
cases_df <- df[df$MS.NonMS =='MS',]
cases_endvelocity <- abs(cases_df$velocity_mean_end)
controls_df <- df[df$MS.NonMS =='~MS',]
controls_endvelocity <- abs(controls_df$velocity_mean_end)
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), freq=F)
lines(density(group1), col="red")
hist(group2, main=paste(name2), freq=F)
lines(density(group2), col="red")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log(cases_endvelocity)
controls_endvelocity_log <- log(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_log, "Original cases",
"log cases", "log transformation")
normality_plot(controls_endvelocity, controls_endvelocity_log, "Original controls",
"log controls", "log transformation")
# Normality test
cases_endvelocity_log[is.infinite(cases_endvelocity_log)] <- NA
cases_endvelocity_log <- na.omit(cases_endvelocity_log)
controls_endvelocity_log[is.infinite(controls_endvelocity_log)] <- NA
controls_endvelocity_log <- na.omit(controls_endvelocity_log)
shapiro.test(cases_endvelocity_log)
shapiro.test(controls_endvelocity_log)
###########################################
# SQUARE TRANSFORMATION
cases_endvelocity_sqrt <- sqrt(cases_endvelocity)
controls_endvelocity_sqrt <- sqrt(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_sqrt, "Original cases",
"SQRT cases", "sqrt transformation")
normality_plot(controls_endvelocity, controls_endvelocity_sqrt, "Original controls",
"SQRT controls", "sqrt transformation")
# Normality test
shapiro.test(cases_endvelocity_sqrt)
shapiro.test(controls_endvelocity_sqrt)
###########################################
# CUBE ROOT TRANSFORMATION
cases_endvelocity_cube <- (cases_endvelocity)^(1/3)
controls_endvelocity_cube <- (controls_endvelocity)^(1/3)
normality_plot(cases_endvelocity, cases_endvelocity_cube, "Original cases",
"Root cube cases", "cube transformation")
normality_plot(controls_endvelocity, controls_endvelocity_cube, "Original controls",
"Root cube controls", "cube transformation")
# Normality test
shapiro.test(cases_endvelocity_cube)
shapiro.test(controls_endvelocity_cube)
###########################################
# LOG TRANSFORMATION CLT
cases_sample_log <- sample(cases_endvelocity_log, size = 30)
controls_sample_log <- sample(controls_endvelocity_log, size = 30)
normality_plot(cases_endvelocity_log, cases_sample_log, "Log pop cases",
"log sample cases", "boxcox transformation")
normality_plot(controls_endvelocity_log, controls_sample_log, "Log pop controls",
"log sample controls", "boxcox transformation")
# Normality test
shapiro.test(cases_sample_log) # p-value = 0.1566
shapiro.test(controls_sample_log) # p-value = 0.9076
###########################################
# SQUARE TRANSFORMATION
cases_sample_sqrt <- sample(cases_endvelocity_sqrt, size = 30)
controls_sample_sqrt <- sample(controls_endvelocity_sqrt, size = 30)
normality_plot(cases_endvelocity_sqrt, cases_sample_sqrt, "sqrt pop cases",
"sqrt sample cases", "sqrt transformation")
normality_plot(controls_endvelocity_sqrt, controls_sample_sqrt, "Log pop controls",
"sqrt sample controls", "sqrt transformation")
# Normality test
shapiro.test(cases_sample_sqrt) # p-value = 0.0007245
shapiro.test(controls_sample_sqrt) # p-value = 0.0007245
cases_sample_cube <- sample(cases_endvelocity_cube, size = 30)
controls_sample_cube <- sample(controls_endvelocity_cube, size = 30)
normality_plot(cases_endvelocity_cube, cases_sample_cube, "cube pop cases",
"cube sample cases", "cube transformation")
normality_plot(controls_endvelocity_cube, controls_sample_cube, "Log pop controls",
"cube sample controls", "cube transformation")
# Normality test
shapiro.test(cases_sample_cube) # p-value = 0.3315
shapiro.test(controls_sample_cube) # p-value = 0.5641
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE) + stat_summary(fun=mean, geom="point", shape=23, size=2, color="red") +
geom_jitter(shape=16, position=position_jitter(0.2))
library(ggplot2)
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE) + stat_summary(fun=mean, geom="point", shape=23, size=2, color="red") +
geom_jitter(shape=16, position=position_jitter(0.2))
vplot
stat_summary(fun.y=mean, geom="point", shape=23, size=2)
library(TOSTER)
help(smd_calc)
help("ks.test")
confounders <- c("velocity_mean_start", "size", "n_languages", "creation_year", "n_commits", "n_issues", "n_contributors")
smd_results <- list()
ks_results <- list()
for (i in seq_along(confounders)){
formula <- as.formula(paste(confounders[i], "~ MS.NonMS"))
result <- smd_calc(formula = formula, data=non_discarded_data, paired = F,
smd_ci = c("nct"), bias_correction = F)
test_result <- ks.test(formula=formula, data=non_discarded_data)
smd_results[[confounders[i]]] <- result
ks_results[[confounders[i]]] <- test_result
}
smd_results
ks_results
df <- data.frame(
Column1 = c(10, 20, 30, 25, 5, 5, 5),
Column2 = c(15, 25, 35, 10, 5, 5, 5)
)
# Create Pie Charts
par(mfrow = c(1, 2))  # Arrange plots in 1 row and 2 columns
for (i in 1:ncol(df)) {
pie(df[,i], main = paste("Pie Chart of", colnames(df)[i]))
}
library(ggplot2)
# Sample Data Frame
df <- data.frame(
Category = paste("Row", 1:7),
Column1 = c(10, 20, 30, 25, 5, 5, 5),
Column2 = c(15, 25, 35, 10, 5, 5, 5)
)
# Melt the data frame for ggplot2
library(reshape2)
# Install and load ggplot2 if not already installed
install.packages("reshape2")
library(ggplot2)
# Sample Data Frame
df <- data.frame(
Category = paste("Row", 1:7),
Column1 = c(10, 20, 30, 25, 5, 5, 5),
Column2 = c(15, 25, 35, 10, 5, 5, 5)
)
# Melt the data frame for ggplot2
library(reshape2)
df_melt <- melt(df, id.vars = "Category")
# Create Pie Charts
ggplot(df_melt, aes(x = "", y = value, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
facet_wrap(~ variable) +
theme_void() +
labs(title = "Pie Charts of Columns")
# Sample Data Frame
df <- data.frame(
Category = paste("Row", 1:7),
MS_projects = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
nonMS_projects = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
library(ggplot2)
# Sample Data Frame
df <- data.frame(
Category = paste("Row", 1:6),
MS_projects = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
nonMS_projects = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
# Melt the data frame for ggplot2
library(reshape2)
df_melt <- melt(df, id.vars = "Category")
# Create Pie Charts
ggplot(df_melt, aes(x = "", y = value, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
facet_wrap(~ variable) +
theme_void() +
labs(title = "Pie Charts of Columns")
# Sample Data Frame
df <- data.frame(
"Share (%)" = paste("Row", 1:6),
"MS projects" = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
# Sample Data Frame
df <- data.frame(
"Share (%)" = c(paste("Row", 1:5), "Remaining subjects"),
"MS projects" = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
# Melt the data frame for ggplot2
library(reshape2)
df_melt <- melt(df, id.vars = "Category")
# Create Pie Charts
ggplot(df_melt, aes(x = "", y = value, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
facet_wrap(~ variable) +
theme_void() +
labs(title = "Pie Charts of Columns")
df_melt <- melt(df, id.vars = "Share (%)")
df
df
# Sample Data Frame
df <- data.frame(
"Share(%)" = c(paste("Row", 1:5), "Remaining subjects"),
"MS projects" = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
df
# Sample Data Frame
df <- data.frame(
"Share %" = c(paste("Row", 1:5), "Remaining subjects"),
"MS projects" = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
df
# Sample Data Frame
df <- data.frame(
"Share" = c(paste("Row", 1:5), "Remaining subjects"),
"MS projects" = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
df_melt <- melt(df, id.vars = "Share")
# Sample Data Frame
df <- data.frame(
"Share" = c(paste("Exclusion ", 1:5), "Remaining subjects"),
"MS projects" = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
# Melt the data frame for ggplot2
library(reshape2)
df_melt <- melt(df, id.vars = "Share")
# Create Pie Charts
ggplot(df_melt, aes(x = "", y = value, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
facet_wrap(~ variable) +
theme_void() +
labs(title = "Pie Charts of Columns")
# Create Pie Charts
ggplot(df_melt, aes(x = "", y = value, fill = Share)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
facet_wrap(~ variable) +
theme_void() +
labs(title = "Pie Charts of Columns")
# Create Pie Charts
ggplot(df_melt, aes(x = "", y = value, fill = Share)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
facet_wrap(~ variable) +
theme_void() +
labs(title = "Pie Charts of Columns") +
scale_fill_brewer()
# Create Pie Charts
ggplot(df_melt, aes(x = "", y = value, fill = Share)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
facet_wrap(~ variable) +
theme_void() +
labs(title = "Pie Charts of Columns") +
scale_fill_brewer() +
geom_col(color = "black")
# Create Pie Charts
ggplot(df_melt, aes(x = "", y = value, fill = Share)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
facet_wrap(~ variable) +
theme_void() +
labs(title = "Pie Charts of Columns") +
scale_fill_brewer()
df <- data.frame(
Row = paste("Row", 1:7),
Column1 = c(10, 20, 30, 25, 5, 5, 5),
Column2 = c(15, 25, 35, 10, 5, 5, 5)
)
# Convert the data frame to a matrix
df_matrix <- as.matrix(df[,-1])
rownames(df_matrix) <- df$Row
# Create the bar plot
barplot(df_matrix, beside = FALSE, col = rainbow(nrow(df_matrix)),
legend = rownames(df_matrix), main = "Stacked Bar Plot",
xlab = "Columns", ylab = "Values")
par(mfrow=c(1,1))
# Create the bar plot
barplot(df_matrix, beside = FALSE, col = rainbow(nrow(df_matrix)),
legend = rownames(df_matrix), main = "Stacked Bar Plot",
xlab = "Columns", ylab = "Values")
df_melt <- melt(df, id.vars = "Row")
ggplot(df_melt, aes(x = variable, y = value, fill = Row)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Plot", x = "Columns", y = "Values") +
theme_minimal()
df
df_melt <- melt(df, id.vars = "Share")
ggplot(df_melt, aes(x = variable, y = value, fill = Row)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Plot", x = "Columns", y = "Values") +
theme_minimal()
# Sample Data Frame
df <- data.frame(
"Share" = c(paste("Exclusion ", 1:5), "Remaining subjects"),
"MS projects" = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
df_melt <- melt(df, id.vars = "Share")
ggplot(df_melt, aes(x = variable, y = value, fill = Row)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Plot", x = "Columns", y = "Values") +
theme_minimal()
ggplot(df_melt, aes(x = variable, y = value, fill = Share)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Plot", x = "Columns", y = "Values") +
theme_minimal()
# Install and load ggplot2 if not already installed
install.packages("treemap")
# Install and load ggplot2 if not already installed
install.packages("treemapify")
library(treemap)
library(treemapify)
df <- data.frame(
Category = rep(c("A", "B"), each = 3),
Subcategory = paste("Item", 1:6),
Value = c(10, 20, 30, 40, 50, 60)
)
treemap(
df,
index = c("Category", "Subcategory"),
vSize = "Value",
title = "Treemap Example"
)
par(mfrow=c(1,2))
df <- data.frame(
Row = paste("Row", 1:7),
Column1 = c(10, 20, 30, 25, 5, 5, 5),
Column2 = c(15, 25, 35, 10, 5, 5, 5)
)
# Convert the data frame to a matrix
df_matrix <- as.matrix(df[,-1])
rownames(df_matrix) <- df$Row
# Create the bar plot
barplot(df_matrix, beside = FALSE, col = rainbow(nrow(df_matrix)),
legend = rownames(df_matrix), main = "Stacked Bar Plot",
xlab = "Columns", ylab = "Values")
df_melt <- melt(df, id.vars = "Share")
ggplot(df_melt, aes(x = variable, y = value, fill = Share)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Plot", x = "Columns", y = "Values") +
theme_minimal()
df_melt <- melt(df, id.vars = Row)
df_melt <- melt(df, id.vars = Row)
df <- data.frame(
Row = paste("Row", 1:7),
Column1 = c(10, 20, 30, 25, 5, 5, 5),
Column2 = c(15, 25, 35, 10, 5, 5, 5)
)
df_melt <- melt(df, id.vars = Row)
ggplot(df_melt, aes(x = variable, y = value, fill = Row)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Plot", x = "Columns", y = "Values") +
theme_minimal()
df_melt <- melt(df, id.vars = "Row")
ggplot(df_melt, aes(x = variable, y = value, fill = Row)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Plot", x = "Columns", y = "Values") +
theme_minimal()
# Sample Data Frame
df <- data.frame(
"Share" = c(paste("Exclusion ", 1:5), "Remaining subjects"),
"MS projects" = c(24.8, 47.88, 1.32, 9, 1.01, 15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
df <- data.frame(
Category = paste("Row", 1:7),
Column1 = c(10, 20, 30, 25, 5, 5, 5),
Column2 = c(15, 25, 35, 10, 5, 5, 5)
)
# Set up the plotting area to have two plots in one row
par(mfrow = c(1, 2))
# Bar plot for Column1
barplot(
df$Column1,
names.arg = df$Category,
main = "Bar Plot of Column1",
col = "blue",
ylab = "Values",
ylim = c(0, max(df$Column1, df$Column2))
)
# Bar plot for Column2
barplot(
df$Column2,
names.arg = df$Category,
main = "Bar Plot of Column2",
col = "red",
ylab = "Values",
ylim = c(0, max(df$Column1, df$Column2))
)
df <- data.frame(
Category = paste("Row", 1:7),
Column1 = c(10, 20, 30, 25, 5, 5, 5),
Column2 = c(15, 25, 35, 10, 5, 5, 5)
)
# Set up the layout to have one row and two columns, with shared y-axis space
layout(matrix(c(1, 2), 1, 2, byrow = TRUE), widths = c(1, 1))
# Determine the y-axis limits
y_lim <- c(0, max(df$Column1, df$Column2))
# Bar plot for Column1
par(mar = c(5, 4, 4, 0.5))  # Adjust margins to make room for shared axis
barplot(
df$Column1,
names.arg = df$Category,
main = "Bar Plot of Column1",
col = "blue",
ylab = "Values",
ylim = y_lim
)
# Bar plot for Column2
par(mar = c(5, 0.5, 4, 2))  # Adjust margins to make room for shared axis
barplot(
df$Column2,
names.arg = df$Category,
main = "Bar Plot of Column2",
col = "red",
ylim = y_lim,
yaxt = "n"  # Suppress y-axis
)
df <- data.frame(
"Stages" = c(paste("Exclusion", 1:5), "Remaining subjects"),
"MS projects" = c(24.8,	47.88, 1.32, 9, 1.01,	15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
df <- data.frame(
"Stages" = c(paste("Exclusion", 1:5), "Remaining subjects"),
"MS projects" = c(24.8,	47.88, 1.32, 9, 1.01,	15.34),
"~MS projects" = c(98, 1.36, 0.01, 0.17, 0.03, 0.38)
)
# Set up the layout to have one row and two columns, with shared y-axis space
layout(matrix(c(1, 2), 1, 2, byrow = TRUE), widths = c(1, 1))
# Determine the y-axis limits
y_lim <- c(0, max(df$MS.projects, df$X.MS.projects))
# Bar plot for Column1
par(mar = c(5, 4, 4, 0.5))  # Adjust margins to make room for shared axis
barplot(
df$MS.projects,
names.arg = df$Stages,
main = "Bar Plot of MS projects",
col = "blue",
ylab = "Share",
ylim = y_lim
)
# Bar plot for Column2
par(mar = c(5, 0.5, 4, 2))  # Adjust margins to make room for shared axis
barplot(
df$X.MS.projects,
names.arg = df$Stages,
main = "Bar Plot of ~MS projects",
col = "red",
ylim = y_lim,
yaxt = "n"  # Suppress y-axis
)
