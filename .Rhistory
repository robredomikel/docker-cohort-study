controls_matched_endvelocity <- abs(controls_df$velocity_mean_end)
## Wilcoxon rank sum test (Non parametric) ~ two sample, hence MANN-WHITNEY
wilcox.test(cases_matched_endvelocity, controls_matched_endvelocity, alternative = "two.sided", conf.int = T) # p-value = 0.5987
wilcox.test(cases_matched_endvelocity, controls_matched_endvelocity, alternative = "less", conf.int = T) # p-value = 0.7013
length(cases_matched_endvelocity)
length(cases_endvelocity)
length(controls_matched_endvelocity)
length(controls_endvelocity)
non_discarded_data
summary(non_discarded_data)
raw_df <- read.csv('/Users/mrobredo23/OULU/docker_cohort-24/data/final_data_file.csv')
raw_df <- subset(raw_df, select = -c(trimmed_languages))
df <- raw_df[c(2:ncol(raw_df))] # For the modelling purposes
cases_endvelocity <- abs(cases_df$velocity_mean_end)
controls_endvelocity <- abs(controls_df$velocity_mean_end)
length(cases_endvelocity)
length(controls_endvelocity)
length(cases_matched_endvelocity)
length(controls_matched_endvelocity)
help(dhyper)
help("fisher.test")
install.packages
install.packages("WebPower")
library(WebPower)
help("wp.mc.t")
raw_df <- read.csv('/Users/mrobredo23/OULU/docker_cohort-24/data/final_data_file.csv')
raw_df <- subset(raw_df, select = -c(trimmed_languages))
df <- raw_df[c(2:ncol(raw_df))] # For the modelling purposes
cases_df <- df[df$MS.NonMS =='MS',]
cases_endvelocity <- abs(cases_df$velocity_mean_end)
controls_df <- df[df$MS.NonMS =='~MS',]
controls_endvelocity <- abs(controls_df$velocity_mean_end)
controls_df
# Through interquantile plots
qqnorm(cases_endvelocity, main='CASES', col='blue')
qqline(cases_endvelocity)
qqnorm(controls_endvelocity, main='CONTROLS', col='blue')
qqline(controls_endvelocity)
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log(cases_endvelocity)
controls_endvelocity_log <- log(controls_endvelocity)
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log(cases_endvelocity)
controls_endvelocity_log <- log(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_log, "ORIGINAL CASES",
"LOG TRANSFORMED CASES", "log transformation")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste("Original dist. of ", name1))
lines(density(group1), col="red")
hist(group1, main=paste(trans_technique, "dist. of ", name1))
lines(density(group1), col="red")
qqnorm(group1, main=paste("Original dist. of ", name1), col='blue')
qqline(group1)
qqnorm(group1, main=paste(trans_technique, "dist. of ", name1), col='blue')
qqline(group1)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, cases_endvelocity_log, "ORIGINAL CASES",
"LOG TRANSFORMED CASES", "log transformation")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste("Original dist. of ", name1))
lines(density(group1), col="red")
hist(group2, main=paste(trans_technique, "dist. of ", name2))
lines(density(group2), col="red")
qqnorm(group1, main=paste("Original dist. of ", name1), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "dist. of ", name2), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, cases_endvelocity_log, "ORIGINAL CASES",
"LOG TRANSFORMED CASES", "log transformation")
qqnorm(cases_endvelocity_log, col='blue')
cases_endvelocity_log
controls_endvelocity_log
cases_endvelocity
normality_plot(cases_endvelocity, cases_endvelocity_log, "ORIGINAL CASES",
"LOG TRANSFORMED CASES", "log transformation")
hist(cases, freq = F, col = rgb(1.000000, 0.549020, 0.000000, 0.5), probability = T, add=T)
lines(density(cases), col = "darkorange", lwd=2)
cases
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste("Original dist. of ", name1), freq=F)
lines(density(group1), col="red")
hist(group2, main=paste(trans_technique, "dist. of ", name2), freq=F)
lines(density(group2), col="red")
qqnorm(group1, main=paste("Original dist. of ", name1), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "dist. of ", name2), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, cases_endvelocity_log, "ORIGINAL CASES",
"LOG TRANSFORMED CASES", "log transformation")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste("Original dist. of ", name1), freq=F)
lines(density(group1), col="red")
hist(group2, main=paste(trans_technique, "dist. of ", name2), freq=F)
lines(density(group2), col="red")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste("Original dist. of ", name1), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique, "dist. of ", name2), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
normality_plot(cases_endvelocity, cases_endvelocity_log, "ORIGINAL CASES",
"LOG TRANSFORMED CASES", "log transformation")
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log10(cases_endvelocity)
controls_endvelocity_log <- log10(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_log, "ORIGINAL CASES",
"LOG TRANSFORMED CASES", "log transformation")
shapiro.test(cases_endvelocity_log)
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log(cases_endvelocity)
controls_endvelocity_log <- log(controls_endvelocity)
shapiro.test(cases_endvelocity_log)
shapiro.test(controls_endvelocity_log)
cases_endvelocity_log
controls_endvelocity_log
cases_endvelocity
controls_endvelocity
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log10(cases_endvelocity)
cases_endvelocity_log
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log(cases_endvelocity)
controls_endvelocity_log <- log(controls_endvelocity)
# Normality test
cases_endvelocity_log[is.infinite(cases_endvelocity_log)] <- NA
cases_endvelocity_log <- na.omit(cases_endvelocity_log)
controls_endvelocity_log[is.infinite(controls_endvelocity_log)] <- NA
controls_endvelocity_log <- na.omit(controls_endvelocity_log)
shapiro.test(cases_endvelocity_log)
shapiro.test(controls_endvelocity_log)
# Through Shapiro-Wilk test: (Given our small sample sizes... it matches the case scenario)
shapiro.test(cases_endvelocity) # For cases
shapiro.test(controls_endvelocity) # For controls
###########################################
# SQUARE TRANSFORMATION
cases_endvelocity_sqrt <- sqrt(cases_endvelocity)
controls_endvelocity_sqrt <- sqrt(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_sqrt, "Original",
"SQRT transform", "sqrt transformation")
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), freq=F)
lines(density(group1), col="red")
hist(group2, main=paste(name2), freq=F)
lines(density(group2), col="red")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
###########################################
# SQUARE TRANSFORMATION
cases_endvelocity_sqrt <- sqrt(cases_endvelocity)
controls_endvelocity_sqrt <- sqrt(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_sqrt, "Original",
"SQRT transform", "sqrt transformation")
# Normality test
cases_endvelocity_log[is.infinite(cases_endvelocity_log)] <- NA
cases_endvelocity_log <- na.omit(cases_endvelocity_log)
controls_endvelocity_log[is.infinite(controls_endvelocity_log)] <- NA
controls_endvelocity_log <- na.omit(controls_endvelocity_log)
# Normality test
shapiro.test(cases_endvelocity_sqrt)
shapiro.test(controls_endvelocity_sqrt)
###########################################
# CUBE ROOT TRANSFORMATION
cases_endvelocity_cube <- (cases_endvelocity)^(1/3)
controls_endvelocity_cube <- (controls_endvelocity)^(1/3)
normality_plot(cases_endvelocity, cases_endvelocity_sqrt, "Original",
"cube transform", "cube root trans")
# Normality test
shapiro.test(cases_endvelocity_sqrt)
shapiro.test(controls_endvelocity_sqrt)
###########################################
# RECIPROCAL TRANSFORMATION (Strongest transformation)
cases_endvelocity_recip <- 1/cases_endvelocity
controls_endvelocity_recip <- 1/controls_endvelocity
normality_plot(cases_endvelocity, cases_endvelocity_recip, "Original cases",
"reciprocal cases", "reciprocal transformation")
normality_plot(controls_endvelocity, controls_endvelocity_recip, "Original controls",
"reciprocal controls", "reciprocal transformation")
# Normality test
shapiro.test(cases_endvelocity_recip)
shapiro.test(controls_endvelocity_recip)
cases_endvelocity_recip
controls_endvelocity_recip
cases_endvelocity
install.packages("forecast")
library(forecast)
help("BoxCox")
###########################################
# try BOX-COX TRANSFORMATION
cases_endvelocity_boxcox <- BoxCox(cases_endvelocity, lambda = "auto")
controls_endvelocity_boxcox <- BoxCox(controls_endvelocity, lambda = "auto")
normality_plot(cases_endvelocity, cases_endvelocity_recip, "Original cases",
"reciprocal cases", "reciprocal transformation")
normality_plot(controls_endvelocity, controls_endvelocity_recip, "Original controls",
"reciprocal controls", "reciprocal transformation")
controls_endvelocity_boxcox
normality_plot(cases_endvelocity, cases_endvelocity_boxcox, "Original cases",
"boxcox cases", "boxcox transformation")
normality_plot(controls_endvelocity, controls_endvelocity_boxcox, "Original controls",
"boxcox controls", "boxcox transformation")
# Normality test
shapiro.test(cases_endvelocity_boxcox)
shapiro.test(controls_endvelocity_boxcox)
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log(cases_endvelocity)
controls_endvelocity_log <- log(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_log, "Original cases",
"log cases", "log transformation")
normality_plot(controls_endvelocity, controls_endvelocity_log, "Original controls",
"log controls", "log transformation")
qqnorm(cases_endvelocity_log, col='blue')
qqline(cases_endvelocity_log)
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log(cases_endvelocity)
controls_endvelocity_log <- log(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_log, "Original cases",
"log cases", "log transformation")
normality_plot(controls_endvelocity, controls_endvelocity_log, "Original controls",
"log controls", "log transformation")
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log(cases_endvelocity)
controls_endvelocity_log <- log(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_log, "Original cases",
"log cases", "log transformation")
normality_plot(controls_endvelocity, controls_endvelocity_log, "Original controls",
"log controls", "log transformation")
# Normality test
cases_endvelocity_log[is.infinite(cases_endvelocity_log)] <- NA
cases_endvelocity_log <- na.omit(cases_endvelocity_log)
controls_endvelocity_log[is.infinite(controls_endvelocity_log)] <- NA
controls_endvelocity_log <- na.omit(controls_endvelocity_log)
shapiro.test(cases_endvelocity_log)
shapiro.test(controls_endvelocity_log)
###########################################
# SQUARE TRANSFORMATION
cases_endvelocity_sqrt <- sqrt(cases_endvelocity)
controls_endvelocity_sqrt <- sqrt(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_sqrt, "Original cases",
"SQRT cases", "sqrt transformation")
normality_plot(controls_endvelocity, controls_endvelocity_sqrt, "Original controls",
"SQRT controls", "sqrt transformation")
# Normality test
shapiro.test(cases_endvelocity_sqrt)
shapiro.test(controls_endvelocity_sqrt)
###########################################
# CUBE ROOT TRANSFORMATION
cases_endvelocity_cube <- (cases_endvelocity)^(1/3)
controls_endvelocity_cube <- (controls_endvelocity)^(1/3)
normality_plot(cases_endvelocity, cases_endvelocity_cube, "Original cases",
"Root cube cases", "cube transformation")
normality_plot(controls_endvelocity, controls_endvelocity_cube, "Original controls",
"Root cube controls", "cube transformation")
# Normality test
shapiro.test(cases_endvelocity_cube)
shapiro.test(controls_endvelocity_cube)
normality_plot(cases_endvelocity, cases_endvelocity_cube, "Original cases",
"Root cube cases", "cube transformation")
normality_plot(controls_endvelocity, controls_endvelocity_cube, "Original controls",
"Root cube controls", "cube transformation")
###########################################
# LOG TRANSFORMATION CLT
cases_sample_log <- sample(cases_endvelocity_log, size = 30)
controls_sample_log <- sample(controls_endvelocity_log, size = 30)
normality_plot(cases_endvelocity_log, cases_sample_log, "Log pop cases",
"log sample cases", "boxcox transformation")
normality_plot(controls_endvelocity_log, controls_sample_log, "Log pop controls",
"log sample controls", "boxcox transformation")
###########################################
# SQUARE TRANSFORMATION
cases_sample_sqrt <- sample(cases_endvelocity_sqrt, size = 30, replace = F)
controls_sample_sqrt <- sample(controls_endvelocity_sqrt, size = 30, replace = F)
normality_plot(cases_endvelocity, cases_endvelocity_boxcox, "Original cases",
"boxcox cases", "boxcox transformation")
normality_plot(controls_endvelocity, controls_endvelocity_boxcox, "Original controls",
"boxcox controls", "boxcox transformation")
###########################################
# SQUARE TRANSFORMATION
cases_sample_sqrt <- sample(cases_endvelocity_sqrt, size = 30)
controls_sample_sqrt <- sample(controls_endvelocity_sqrt, size = 30)
###########################################
# LOG TRANSFORMATION CLT
cases_sample_log <- sample(cases_endvelocity_log, size = 30)
controls_sample_log <- sample(controls_endvelocity_log, size = 30)
normality_plot(cases_endvelocity_log, cases_sample_log, "Log pop cases",
"log sample cases", "boxcox transformation")
normality_plot(controls_endvelocity_log, controls_sample_log, "Log pop controls",
"log sample controls", "boxcox transformation")
###########################################
# LOG TRANSFORMATION CLT
cases_sample_log <- sample(cases_endvelocity_log, size = 30)
controls_sample_log <- sample(controls_endvelocity_log, size = 30)
normality_plot(cases_endvelocity_log, cases_sample_log, "Log pop cases",
"log sample cases", "boxcox transformation")
normality_plot(controls_endvelocity_log, controls_sample_log, "Log pop controls",
"log sample controls", "boxcox transformation")
# Normality test
shapiro.test(cases_sample_log)
shapiro.test(controls_sample_log)
###########################################
# LOG TRANSFORMATION CLT
cases_sample_log <- sample(cases_endvelocity_log, size = 30)
controls_sample_log <- sample(controls_endvelocity_log, size = 30)
normality_plot(cases_endvelocity_log, cases_sample_log, "Log pop cases",
"log sample cases", "boxcox transformation")
normality_plot(controls_endvelocity_log, controls_sample_log, "Log pop controls",
"log sample controls", "boxcox transformation")
# Normality test
shapiro.test(cases_sample_log)
shapiro.test(controls_sample_log)
###########################################
# SQUARE TRANSFORMATION
cases_sample_sqrt <- sample(cases_endvelocity_sqrt, size = 30)
controls_sample_sqrt <- sample(controls_endvelocity_sqrt, size = 30)
normality_plot(cases_endvelocity_sqrt, cases_sample_sqrt, "sqrt pop cases",
"sqrt sample cases", "sqrt transformation")
normality_plot(controls_endvelocity_sqrt, controls_sample_sqrt, "Log pop controls",
"sqrt sample controls", "sqrt transformation")
# Normality test
shapiro.test(cases_endvelocity_sqrt)
shapiro.test(controls_endvelocity_sqrt)
###########################################
# LOG TRANSFORMATION CLT
cases_sample_log <- sample(cases_endvelocity_log, size = 30)
controls_sample_log <- sample(controls_endvelocity_log, size = 30)
normality_plot(cases_endvelocity_log, cases_sample_log, "Log pop cases",
"log sample cases", "boxcox transformation")
normality_plot(controls_endvelocity_log, controls_sample_log, "Log pop controls",
"log sample controls", "boxcox transformation")
# Normality test
shapiro.test(cases_sample_log)
shapiro.test(controls_sample_log)
###########################################
# SQUARE TRANSFORMATION
cases_sample_sqrt <- sample(cases_endvelocity_sqrt, size = 30)
controls_sample_sqrt <- sample(controls_endvelocity_sqrt, size = 30)
normality_plot(cases_endvelocity_sqrt, cases_sample_sqrt, "sqrt pop cases",
"sqrt sample cases", "sqrt transformation")
normality_plot(controls_endvelocity_sqrt, controls_sample_sqrt, "Log pop controls",
"sqrt sample controls", "sqrt transformation")
# Normality test
shapiro.test(cases_sample_sqrt)
shapiro.test(controls_sample_sqrt)
cases_sample_cube <- sample(cases_endvelocity_cube, size = 30)
controls_sample_cube <- sample(controls_endvelocity_cube, size = 30)
normality_plot(cases_endvelocity_cube, cases_sample_cube, "cube pop cases",
"cube sample cases", "cube transformation")
normality_plot(controls_endvelocity_cube, controls_sample_cube, "Log pop controls",
"cube sample controls", "cube transformation")
# Normality test
shapiro.test(cases_sample_cube)
shapiro.test(controls_sample_cube)
controls_sample_cube <- sample(controls_endvelocity_cube, size = 30)
normality_plot(controls_endvelocity_cube, controls_sample_cube, "Log pop controls",
"cube sample controls", "cube transformation")
shapiro.test(controls_sample_cube)
cases_endvelocity
library(ggplot2)
df <- raw_df[c(2:ncol(raw_df))] # For the modelling purposes
# means and std of the samples:
cases_endvelocity_log_mean <- mean(cases_endvelocity_log)
cases_endvelocity_log_std <- sd(cases_endvelocity_log)
controls_endvelocity_log_mean <- mean(controls_endvelocity_log)
controls_endvelocity_log_std <- sd(controls_endvelocity_log)
ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE)
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE)
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE) + stat_summary(fun.y=mean, geom="point", shape=23, size=2) +
geom_jitter(shape=16, position=position_jitter(0.2))
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE) + stat_summary(fun=mean, geom="point", shape=23, size=2) +
geom_jitter(shape=16, position=position_jitter(0.2))
vplot
vplot <- ggplot(df, aes(x=df$MS.NonMS, y=log(df$velocity_mean_end))) +
geom_violin(trim=FALSE) + stat_summary(fun=mean, geom="point", shape=23, size=2, color="red") +
geom_jitter(shape=16, position=position_jitter(0.2))
vplot
library(lsr)
library(lsr)
# Distance effect by Cohen's D statistic
cohensD(sqmeans, nonsqmeans)
# Distance effect by Cohen's D statistic
cohensD(cases_endvelocity_log_mean, controls_endvelocity_log_mean)
# Distance effect by Cohen's D statistic
cohensD(cases_endvelocity_log, controls_endvelocity_log)
# Power-test
pwr.t2n.test(n1=58, n2=207, d= 0.07120195, sig.level = 0.1, alternative = 'two.sided')
library(pwr)
help(power.t2n.test)
??(power.t2n.test)
??("power.t2n.test")
install.packages("pwr")
library(pwr)
# Power-test
pwr.t2n.test(n1=58, n2=207, d= 0.07120195, sig.level = 0.1, alternative = 'two.sided')
t.test(x = cases_endvelocity_log, y = controls_endvelocity_log, alternative = 'two.sided')
raw_df <- read.csv('/Users/mrobredo23/OULU/docker_cohort-24/data/final_data_file.csv')
raw_df <- subset(raw_df, select = -c(trimmed_languages))
df <- raw_df[c(2:ncol(raw_df))] # For the modelling purposes
cases_df <- df[df$MS.NonMS =='MS',]
cases_endvelocity <- abs(cases_df$velocity_mean_end)
controls_df <- df[df$MS.NonMS =='~MS',]
controls_endvelocity <- abs(controls_df$velocity_mean_end)
normality_plot <- function(group1, group2, name1, name2, trans_technique) {
par(mfrow=c(2,2))
hist(group1, main=paste(name1), freq=F)
lines(density(group1), col="red")
hist(group2, main=paste(name2), freq=F)
lines(density(group2), col="red")
group2[is.infinite(group2)] <- NA
group2 <- na.omit(group2)
qqnorm(group1, main=paste(name1), col='blue')
qqline(group1)
qqnorm(group2, main=paste(trans_technique), col='blue')
qqline(group2)
par(mfrow=c(1,1))
}
###########################################
# LOG TRANSFORMATION
cases_endvelocity_log <- log(cases_endvelocity)
controls_endvelocity_log <- log(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_log, "Original cases",
"log cases", "log transformation")
normality_plot(controls_endvelocity, controls_endvelocity_log, "Original controls",
"log controls", "log transformation")
# Normality test
cases_endvelocity_log[is.infinite(cases_endvelocity_log)] <- NA
cases_endvelocity_log <- na.omit(cases_endvelocity_log)
controls_endvelocity_log[is.infinite(controls_endvelocity_log)] <- NA
controls_endvelocity_log <- na.omit(controls_endvelocity_log)
shapiro.test(cases_endvelocity_log)
shapiro.test(controls_endvelocity_log)
###########################################
# SQUARE TRANSFORMATION
cases_endvelocity_sqrt <- sqrt(cases_endvelocity)
controls_endvelocity_sqrt <- sqrt(controls_endvelocity)
normality_plot(cases_endvelocity, cases_endvelocity_sqrt, "Original cases",
"SQRT cases", "sqrt transformation")
normality_plot(controls_endvelocity, controls_endvelocity_sqrt, "Original controls",
"SQRT controls", "sqrt transformation")
# Normality test
shapiro.test(cases_endvelocity_sqrt)
shapiro.test(controls_endvelocity_sqrt)
###########################################
# CUBE ROOT TRANSFORMATION
cases_endvelocity_cube <- (cases_endvelocity)^(1/3)
controls_endvelocity_cube <- (controls_endvelocity)^(1/3)
normality_plot(cases_endvelocity, cases_endvelocity_cube, "Original cases",
"Root cube cases", "cube transformation")
normality_plot(controls_endvelocity, controls_endvelocity_cube, "Original controls",
"Root cube controls", "cube transformation")
# Normality test
shapiro.test(cases_endvelocity_cube)
shapiro.test(controls_endvelocity_cube)
###########################################
# LOG TRANSFORMATION CLT
cases_sample_log <- sample(cases_endvelocity_log, size = 30)
controls_sample_log <- sample(controls_endvelocity_log, size = 30)
normality_plot(cases_endvelocity_log, cases_sample_log, "Log pop cases",
"log sample cases", "boxcox transformation")
normality_plot(controls_endvelocity_log, controls_sample_log, "Log pop controls",
"log sample controls", "boxcox transformation")
# Normality test
shapiro.test(cases_sample_log) # p-value = 0.1566
shapiro.test(controls_sample_log) # p-value = 0.9076
###########################################
# SQUARE TRANSFORMATION
cases_sample_sqrt <- sample(cases_endvelocity_sqrt, size = 30)
controls_sample_sqrt <- sample(controls_endvelocity_sqrt, size = 30)
normality_plot(cases_endvelocity_sqrt, cases_sample_sqrt, "sqrt pop cases",
"sqrt sample cases", "sqrt transformation")
normality_plot(controls_endvelocity_sqrt, controls_sample_sqrt, "Log pop controls",
"sqrt sample controls", "sqrt transformation")
# Normality test
shapiro.test(cases_sample_sqrt) # p-value = 0.0007245
shapiro.test(controls_sample_sqrt) # p-value = 0.0007245
cases_sample_cube <- sample(cases_endvelocity_cube, size = 30)
controls_sample_cube <- sample(controls_endvelocity_cube, size = 30)
normality_plot(cases_endvelocity_cube, cases_sample_cube, "cube pop cases",
"cube sample cases", "cube transformation")
normality_plot(controls_endvelocity_cube, controls_sample_cube, "Log pop controls",
"cube sample controls", "cube transformation")
# Normality test
shapiro.test(cases_sample_cube) # p-value = 0.3315
shapiro.test(controls_sample_cube) # p-value = 0.5641
